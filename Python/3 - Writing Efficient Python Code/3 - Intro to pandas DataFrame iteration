\--Intro to pandas DataFrame iteration
import numpy as np
def calc_win_perc(wins, games_played):
	win_perc = wins / games_played
	return np.round(win_perc,2)
win_perc_list = []
Example 1:
for i in range(len(baseball_df)):
	row = baseball_df.iloc[i]
	wins = row['W']
	games_played = row['G']
	win_perc = calc_win_perc(wins, games_played)
	win_perc_list.append(win_perc)
baseball_df['WP'] = win_perc_list

It is equal to: iterrows is much more efficient

for i,row in baseball_df.iterrows():
	wins = row['W']
	games_played = row['G']
	win_perc = calc_win_perc(wins, games_played)
	win_perc_list.append(win_perc)
baseball_df['WP'] = win_perc_list

you can keep the result of .iterrows() in the tuple form (as you did with for row_tuple in pit_df.iterrows()).

If using i,row, you can access things from the row using square brackets (i.e., row['Team']). If using row_tuple, you would have to specify which element of the tuple you'd like to access before grabbing the team name (i.e., row_tuple[1]['Team']

\--Another iterator method: .itertuples()
for row_tuple in team_wins_df.iterrows():
print(row_tuple)
print(type(row_tuple[1])) #output: <class 'pandas.core.series.Series'>

Output:
(0, Team
Year
ARI
2012
W
81
Name: 0, dtype: object)


Now,

for row_namedtuple in team_wins_df.itertuples():
print(row_namedtuple)

Output: 
Pandas(Index=0, Team='ARI', Year=2012, W=81)
Pandas(Index=1, Team='ATL', Year=2012, W=94)

Differences to access data:

for row_tuple in team_wins_df.iterrows():
print(row_tuple[1]['Team'])

for row_namedtuple in team_wins_df.itertuples():
print(row_namedtuple.Team)

Comparing methods: timeit
iterrows: 527 ms ± 41.1 ms
itertuples: 7.48 ms ± 243 µs

\--pandas alternative to looping

run_diffs_iterrows = []
for i,row in baseball_df.iterrows():
	run_diff = calc_run_diff(row['RS'], row['RA'])
	run_diffs_iterrows.append(run_diff)
baseball_df['RD'] = run_diffs_iterrows

It's is the same as pandas .apply(). It's similar to map function in Python. Must specify an axis to apply ( 0 for columns; 1 for rows); Can be used with anonymous functions; 

run_diffs_apply = baseball_df.apply(
	lambda row: calc_run_diff(row['RS'], row['RA']),
	axis=1)
baseball_df['RD'] = run_diffs_apply


*Alternative to directly convert: rays_df['Playoffs'].apply(text_playoffs)

Using the .apply() method with a lambda function allows you to apply a function to a DataFrame without the need to write a for loop.

\--Optimal pandas iterating
Optimal pandas alternative to looping for the two examples above

Broadcasting (vectorizing) is extremely e efficient! In addition to more readability too!

run_diffs_np = baseball_df['RS'].values - baseball_df['RA'].values
baseball_df['RD'] = run_diffs_np

%%timeit
win_perc_preds_loop = []
for row in baseball_df.itertuples():
    runs_scored = row.RS
    runs_allowed = row.RA
    win_perc_pred = predict_win_perc(runs_scored, runs_allowed)
    win_perc_preds_loop.append(win_perc_pred)

%timeit win_perc_preds_apply = baseball_df.apply(lambda row: predict_win_perc(row['RS'], row['RA']), axis=1)

%%timeit
win_perc_preds_np = predict_win_perc(baseball_df['RS'].values, baseball_df['RA'].values)
baseball_df['WP_preds'] = win_perc_preds_np
